<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>
	gganimate on A stats website
	
	</title>
    <link>/tags/gganimate/</link>
    <description>Recent content 
	
	in gganimate on A stats website
	</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
	
	
    <lastBuildDate>Sat, 16 May 2020 00:00:00 +0000</lastBuildDate>
	
    
        <atom:link href="/tags/gganimate/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Grand Slam title history as an animated bar chart race</title>
      <link>/2020/05/gs_gganim/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/gs_gganim/</guid>
	  <description>&lt;p&gt;&lt;img src=&#34;/post/2020-05-15-grand-slam-title-history-as-an-animated-bar-chart-race_files/gganim6.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve spoiled it by putting the gif at the start of the post but if you are interested in how it was made then read on!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve seen this kind of charts around the web so I wanted to make a tennis-related one and what better than using Grand Slam wins since the very beginning; 1877.&lt;/p&gt;
&lt;p&gt;The main package that is needed for the animation is gganimate. As the name suggests it integrates with ggplot to make an animation given many different charts and a transition variable.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s load the necessary packages&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;require&lt;/span&gt;(XML)
&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;require&lt;/span&gt;(data.table)
&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;library&lt;/span&gt;(httr)
&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;require&lt;/span&gt;(dplyr)
&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;require&lt;/span&gt;(stringr)
&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;require&lt;/span&gt;(ggplot2)
&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;require&lt;/span&gt;(gganimate)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we need to get the data for the chart. 
Wikipedia helpfully has an article with all Grand Slam winner in history so we can pull the table within the article using &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;readHTMLTable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once we know where the table is located in the HTML we can pull it into a data table.&lt;/p&gt;
&lt;p&gt;There are some kinks in the table we have to get rid off. For example, in 1977 there were two Austrlian Opens so the entry for 1977 is split into two rows but just one year.&lt;/p&gt;
&lt;p&gt;We then get rid of anything that is not a player name including special characters. Tjem the table is melted so we get one entry per year and Grand Slam.&lt;/p&gt;
&lt;p&gt;We also get rid of other stuff such as all the French Opens before 1925 because the tournament was not actually &amp;ldquo;open&amp;rdquo; and also instances when the tournaments were not held such as world wars.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;gs&amp;lt;-&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;data.table&lt;/span&gt;(tabs[[3]])

&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;names&lt;/span&gt;(gs) &amp;lt;- &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;as.character&lt;/span&gt;(&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;unlist&lt;/span&gt;(gs[1,]))
gs&amp;lt;-gs[&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;-1&lt;/span&gt;]

gs&amp;lt;-&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;bind_rows&lt;/span&gt;(gs,&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;data.table&lt;/span&gt;(Year=&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;1977&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;Australian Open&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;Vitas Gerulaitis&amp;#34;&lt;/span&gt;))

gs&amp;lt;-gs&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;[grep&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;[0-9]&amp;#34;&lt;/span&gt;,Year)]&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;[order&lt;/span&gt;(Year)]

gs &amp;lt;- &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;melt&lt;/span&gt;(gs, id.vars = &lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;)

gs$winner &amp;lt;- &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;\\(([^)]+)\\)&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,gs$value)

gs$winner&amp;lt;-&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;[*]&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,gs$winner)
gs$winner&amp;lt;-&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;[†]&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,gs$winner)

gs$winner&amp;lt;-&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;Amateur Era ends&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,gs$winner)
gs$winner&amp;lt;-&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;Open Era begins&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,gs$winner)

gs[,winner:=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;str_trim&lt;/span&gt;(winner)]

gs[,.N,winner]&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;[order&lt;/span&gt;(-N)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##                      winner  N
##   1: tournament not created 43
##   2:                   &amp;lt;NA&amp;gt; 24
##   3:          Roger Federer 20
##   4:           Rafael Nadal 19
##   5:         Novak Djokovic 17
##  ---                          
## 167:           Rafael Osuna  1
## 168:         Manuel Orantes  1
## 169:           Andy Roddick  1
## 170:  Juan Martín del Potro  1
## 171:            Marin Cilic  1
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;gs&amp;lt;-gs[!(variable==&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;French Open&amp;#34;&lt;/span&gt; &amp;amp; Year&amp;lt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1925&lt;/span&gt;)]

gs[,win:=&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;]

gs&amp;lt;-gs[!&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;grep&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;tournament|started|WorldW|occupation|Tournament|oronavir&amp;#34;&lt;/span&gt;,winner)]

gs&amp;lt;-gs[winner!=&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now need to keep a running tally of anyone who has won at least one Grand Slam for every year so that they show up in our chart with the correct number of GS&amp;rsquo;s. This is what the &lt;code&gt;fun&lt;/code&gt; function is doing below.&lt;/p&gt;
&lt;p&gt;Additionally we also need to rank the players from most GS&amp;rsquo;s to least GS&amp;rsquo;s to create a rank variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#888&#34;&gt;#Get a list of all the years&lt;/span&gt;
yearList&amp;lt;-gs&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;[order&lt;/span&gt;(Year)][,&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;unique&lt;/span&gt;(Year)]
&lt;span style=&#34;color:#888&#34;&gt;#Function fun calculates cumulative GS wins for all the players up to the current year&lt;/span&gt;
fun&amp;lt;-&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;function&lt;/span&gt;(year){ gs[Year&amp;lt;=year,.(win=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;sum&lt;/span&gt;(win),latestWin=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;max&lt;/span&gt;(Year)),.(winner)][,year:=year] }
&lt;span style=&#34;color:#888&#34;&gt;#Create a table that has all combinations of year/player&lt;/span&gt;
gsfull&amp;lt;-&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;lapply&lt;/span&gt;(yearList, fun) %&amp;gt;% &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;rbindlist&lt;/span&gt;()

gsfull&amp;lt;-gsfull&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;[order&lt;/span&gt;(year,-win,-latestWin)]
gsfull[,rank:=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;,.N),year]

gsfull[,win_label := &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;paste0&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, win)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now start plotting our data. First create a tile plot with ggplot. Tiles work better than plot for this case because they slide into position in a nicer way when the plot transitions between years.&lt;/p&gt;
&lt;p&gt;A lot of the code I&amp;rsquo;m using I found over here in &lt;a href=&#34;https://stackoverflow.com/questions/53162821/animated-sorted-bar-chart-with-bars-overtaking-each-other&#34;&gt;stack overflow&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;y&amp;lt;-&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1877&lt;/span&gt;

sp&amp;lt;-&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;ggplot&lt;/span&gt;(gsfull[year&amp;gt;=y &amp;amp; rank&amp;lt;=&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;30&lt;/span&gt;],&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;aes&lt;/span&gt;(x=rank,y=win,fill=winner)) + 
  &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;geom_tile&lt;/span&gt;(&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;aes&lt;/span&gt;(y=win/&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;2&lt;/span&gt;,height=win, width=&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0.95&lt;/span&gt;),alpha=&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0.9&lt;/span&gt;) + &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;theme_bw&lt;/span&gt;() +
  &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;geom_text&lt;/span&gt;(&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;aes&lt;/span&gt;(y=&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;,label = &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;paste0&lt;/span&gt;(winner,&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)), hjust = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;) +
  &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;geom_text&lt;/span&gt;(&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;aes&lt;/span&gt;(y=win,label = win_label, hjust=&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;)) +
  &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;coord_flip&lt;/span&gt;(clip = &lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;, expand = F) +
  &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;scale_x_reverse&lt;/span&gt;() +
  &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;guides&lt;/span&gt;(color = &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;, fill = &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;) +
  &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;theme&lt;/span&gt;(axis.line=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_blank&lt;/span&gt;(),
        axis.text.x=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_blank&lt;/span&gt;(),
        axis.text.y=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_blank&lt;/span&gt;(),
        axis.ticks=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_blank&lt;/span&gt;(),
        axis.title.x=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_blank&lt;/span&gt;(),
        axis.title.y=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_blank&lt;/span&gt;(),
        legend.position=&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;,
        panel.background=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_blank&lt;/span&gt;(),
        panel.border=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_blank&lt;/span&gt;(),
        panel.grid.major=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_blank&lt;/span&gt;(),
        panel.grid.minor=&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_blank&lt;/span&gt;(),
        panel.grid.major.x = &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_line&lt;/span&gt;( size=&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;.1&lt;/span&gt;, color=&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;grey&amp;#34;&lt;/span&gt; ),
        panel.grid.minor.x = &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;element_line&lt;/span&gt;( size=&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;.1&lt;/span&gt;, color=&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;grey&amp;#34;&lt;/span&gt; ),
        plot.margin = &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;margin&lt;/span&gt;(&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;cm&amp;#34;&lt;/span&gt;)
        )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the base plot made it&amp;rsquo;s time to actually animate it. This is where &lt;code&gt;gganimate&lt;/code&gt; comes into play. The main funtion needed is &lt;code&gt;transition_states&lt;/code&gt; which takes a transition parameter, &lt;code&gt;year&lt;/code&gt; in our case, and animates the plot based on it.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a few extra bits in there; &lt;code&gt;enter_drift&lt;/code&gt; and &lt;code&gt;exit_shrink&lt;/code&gt; govern how the bars enter and leave the plot and &lt;code&gt;ease_aes&lt;/code&gt; controls how the bars switch around. There are many other options that &lt;code&gt;gganimate&lt;/code&gt; provides so this is just scratching the surface.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;p &amp;lt;- sp + &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;transition_states&lt;/span&gt;(year, transition_length = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;4&lt;/span&gt;, state_length = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;2&lt;/span&gt;) +
  &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;view_follow&lt;/span&gt;(fixed_x = &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)  +
  &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;labs&lt;/span&gt;(title = &lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#39;Grand Slam Titles : {closest_state}&amp;#39;&lt;/span&gt;)  +
   &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;enter_drift&lt;/span&gt;(y_mod=&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;10&lt;/span&gt;) + &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;exit_shrink&lt;/span&gt;()  + 
  &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;ease_aes&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#39;linear&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally once the transitions are defined &lt;code&gt;animate&lt;/code&gt; takes the object and turns it into a gif or a video if you want depending on the renderer that you choose. The code below is what renders the plot at the start of this post.&lt;/p&gt;
&lt;p&gt;Duration and size parameters are passed by the user. Here I would like to note that if you call the plot &lt;code&gt;p&lt;/code&gt; it does get rendered but it looks different than the output you get with animate so I&amp;rsquo;d recommend always running &lt;code&gt;animate&lt;/code&gt; to see what the actual final output will be.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;animate&lt;/span&gt;(p, &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1200&lt;/span&gt;, fps = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;10&lt;/span&gt;,  width = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;800&lt;/span&gt;, height = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;600&lt;/span&gt;, 
        renderer = &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;gifski_renderer&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;gs_chart.gif&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it! As with most projects the trickiest part was getting the data in the format I needed it and then spent some time with aesthetic choices. The point being that once you have your data ready &lt;code&gt;ggplot&lt;/code&gt; and &lt;code&gt;gganimate&lt;/code&gt; provide an intuitive framework to create cool looking charts.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>